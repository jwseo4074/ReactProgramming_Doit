{"ast":null,"code":"var _jsxFileName = \"/Users/seojiwon/Desktop/ReactProgramming_Doit/src/03/Counter.jsx\",\n    _s = $RefreshSig$();\n\n// 리액트 16.8 이전 버전에서는 함수형 컴포넌트에서는 상태를 관리할 수 없었다.\n// 리액트 16.8 에서 Hooks 라는 기능이 도입되면서 함수형 컴포넌트에서도 상태를 관리할 수 있게 되었다.\n// 이번에는 useState 라는 함수를 사용해보게 되는데, 이게 바로 리액트의 Hooks 중 하나이다.\nimport { useState } from 'react';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Counter() {\n  _s();\n\n  const [number, setNumber] = useState(0);\n\n  const increase = () => {\n    console.log(\"number = \", number); // setNumber(number - 1);\n\n    setNumber(prevNumber => prevNumber + 1); // 지금은 Setter 함수를 사용 할 때, 업데이트 하고 싶은 새로운 값을 파라미터로 넣어주고 있는데,\n    // 그 대신에 기존 값을 어떻게 업데이트 할 지에 대한 함수를 등록하는 방식으로도 값을 업데이트 할 수 있다.\n\n    console.log(\"number = \", number);\n  };\n\n  const decrease = () => {\n    console.log(\"number = \", number);\n    setNumber(number - 1);\n    console.log(\"number = \", number);\n  };\n\n  const [count, setCount] = useState(0);\n\n  const onClick1 = () => {\n    setCount(count + 1);\n    setCount(count + 1);\n    console.dir(count);\n  };\n\n  const onClick2 = () => {\n    setCount(count => count + 1);\n    setCount(count => count + 1);\n    console.dir(count);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: number\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: increase,\n      children: \"+1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: decrease,\n      children: \"-1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClick1,\n      children: \"count + 1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClick2,\n      children: \"count => count + 1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Counter, \"KuX9etCVXzvI4HoTbSwTXjsW+YM=\");\n\n_c = Counter;\nexport default Counter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"sources":["/Users/seojiwon/Desktop/ReactProgramming_Doit/src/03/Counter.jsx"],"names":["useState","React","Counter","number","setNumber","increase","console","log","prevNumber","decrease","count","setCount","onClick1","dir","onClick2"],"mappings":";;;AAAA;AACA;AACA;AAGA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,OAAT,GAAmB;AAAA;;AACf,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,CAAD,CAApC;;AAEA,QAAMK,QAAQ,GAAG,MAAO;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBJ,MAAzB,EADoB,CAEpB;;AACAC,IAAAA,SAAS,CAACI,UAAU,IAAIA,UAAU,GAAG,CAA5B,CAAT,CAHoB,CAIpB;AACA;;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBJ,MAAzB;AACH,GAPD;;AASA,QAAMM,QAAQ,GAAG,MAAM;AACnBH,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBJ,MAAzB;AACAC,IAAAA,SAAS,CAACD,MAAM,GAAG,CAAV,CAAT;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBJ,MAAzB;AACH,GAJD;;AAMA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,CAAD,CAAlC;;AAEA,QAAMY,QAAQ,GAAG,MAAM;AACnBD,IAAAA,QAAQ,CAACD,KAAK,GAAE,CAAR,CAAR;AACAC,IAAAA,QAAQ,CAACD,KAAK,GAAE,CAAR,CAAR;AACAJ,IAAAA,OAAO,CAACO,GAAR,CAAYH,KAAZ;AACH,GAJD;;AAMA,QAAMI,QAAQ,GAAG,MAAM;AACnBH,IAAAA,QAAQ,CAACD,KAAK,IAAGA,KAAK,GAAE,CAAhB,CAAR;AACAC,IAAAA,QAAQ,CAACD,KAAK,IAAGA,KAAK,GAAE,CAAhB,CAAR;AACAJ,IAAAA,OAAO,CAACO,GAAR,CAAYH,KAAZ;AACH,GAJD;;AAMA,sBACI;AAAA,4BACI;AAAA,gBAAKP;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAQ,MAAA,OAAO,EAAEE,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAQ,MAAA,OAAO,EAAEI,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAA,gBAAKC;AAAL;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI;AAAQ,MAAA,OAAO,EAAEE,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ,eAMI;AAAQ,MAAA,OAAO,EAAEE,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH;;GA1CQZ,O;;KAAAA,O;AA4CT,eAAeA,OAAf","sourcesContent":["// 리액트 16.8 이전 버전에서는 함수형 컴포넌트에서는 상태를 관리할 수 없었다.\n// 리액트 16.8 에서 Hooks 라는 기능이 도입되면서 함수형 컴포넌트에서도 상태를 관리할 수 있게 되었다.\n// 이번에는 useState 라는 함수를 사용해보게 되는데, 이게 바로 리액트의 Hooks 중 하나이다.\n\n\nimport { useState } from 'react';\nimport React from 'react';\n\nfunction Counter() {\n    const [number, setNumber] = useState(0);\n\n    const increase = () =>  {\n        console.log(\"number = \", number);\n        // setNumber(number - 1);\n        setNumber(prevNumber => prevNumber + 1);\n        // 지금은 Setter 함수를 사용 할 때, 업데이트 하고 싶은 새로운 값을 파라미터로 넣어주고 있는데,\n        // 그 대신에 기존 값을 어떻게 업데이트 할 지에 대한 함수를 등록하는 방식으로도 값을 업데이트 할 수 있다.\n        console.log(\"number = \", number);\n    }\n\n    const decrease = () => {\n        console.log(\"number = \", number);\n        setNumber(number - 1);\n        console.log(\"number = \", number);\n    }\n\n    const [count, setCount] = useState(0);\n\n    const onClick1 = () => {\n        setCount(count+ 1);\n        setCount(count+ 1);\n        console.dir(count);\n    }\n\n    const onClick2 = () => {\n        setCount(count=> count+ 1);\n        setCount(count=> count+ 1);\n        console.dir(count);\n    }\n\n    return (\n        <div>\n            <h1>{number}</h1>\n            <button onClick={increase}>+1</button>\n            <button onClick={decrease}>-1</button>\n            <h1>{count}</h1>\n            <button onClick={onClick1}>count + 1</button>\n            <button onClick={onClick2}>count => count + 1</button>\n        </div>\n    );\n}\n\nexport default Counter;"]},"metadata":{},"sourceType":"module"}