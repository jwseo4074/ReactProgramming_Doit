{"ast":null,"code":"var _jsxFileName = \"/Users/seojiwon/Desktop/ReactProgramming_Doit/src/03/ColorComponent.jsx\";\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ColorComponent(props) {\n  // const [message, setMessage] = useState();\n  // setMessage( props.bored ? '놀러 가자' : '하던 일 열심히 마무리하기')\n  const message = props.bored ? '놀러 가자' : '하던 일 열심히 마무리하기';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: props.color\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uC548\\uB155\\uD558\\uC138\\uC694 \", props.name, \" \\uC785\\uB2C8\\uB2E4. \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this) // << props는 읽기 전용이다. >>\n  // 함수 컴포넌트나 클래스 컴포넌트 모두 컴포넌트의 자체 props를 수정해서는 안 됩니다. 다음 sum 함수를 살펴봅시다.\n  // function sum(a, b) {\n  //   return a + b;\n  // }\n  // 이런 함수들은 순수 함수라고 호칭합니다. 입력값을 바꾸려 하지 않고 항상 동일한 입력값에 대해 동일한 결과를 반환하기 때문입니다.\n  // 반면에 다음 함수는 자신의 입력값을 변경하기 때문에 순수 함수가 아닙니다.\n  // function withdraw(account, amount) {\n  //   account.total -= amount;\n  // }\n  // React는 매우 유연하지만 한 가지 엄격한 규칙이 있습니다.\n  // 모든 React 컴포넌트는 자신의 props를 다룰 때 반드시 순수 함수처럼 동작해야 합니다.\n  // 물론 애플리케이션 UI는 동적이며 시간에 따라 변합니다. 다음 장에서는 “state”라는 새로운 개념을 소개합니다. \n  // React 컴포넌트는 state를 통해 위 규칙을 위반하지 않고 사용자 액션, 네트워크 응답 및 다른 요소에 대한 응답으로 \n  // 시간에 따라 자신의 출력값을 변경할 수 있습니다.\n  ;\n}\n\n_c = ColorComponent;\nexport default ColorComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"ColorComponent\");","map":{"version":3,"sources":["/Users/seojiwon/Desktop/ReactProgramming_Doit/src/03/ColorComponent.jsx"],"names":["React","useState","ColorComponent","props","message","bored","color","name"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;;AAEA,SAASC,cAAT,CAAyBC,KAAzB,EAAgC;AAC5B;AAEA;AACA,QAAMC,OAAO,GAAGD,KAAK,CAACE,KAAN,GAAc,OAAd,GAAwB,gBAAxC;AAEA,sBACI;AAAA,2BACI;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAEH,KAAK,CAACG;AAAf,OAAZ;AAAA,8BACI;AAAA,sDAAUH,KAAK,CAACI,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEA;AAAA,kBAAIH;AAAJ;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ,CAOI;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AA3BJ;AA8BH;;KApCQF,c;AAsCT,eAAeA,cAAf","sourcesContent":["import React, {useState} from 'react';\n\nfunction ColorComponent (props) {\n    // const [message, setMessage] = useState();\n\n    // setMessage( props.bored ? '놀러 가자' : '하던 일 열심히 마무리하기')\n    const message = props.bored ? '놀러 가자' : '하던 일 열심히 마무리하기';\n    \n    return (\n        <div>\n            <div style={{ color: props.color }}>\n                <p>안녕하세요 {props.name} 입니다. </p>\n            <p>{message}</p>\n            </div>\n        </div>\n        // << props는 읽기 전용이다. >>\n\n        // 함수 컴포넌트나 클래스 컴포넌트 모두 컴포넌트의 자체 props를 수정해서는 안 됩니다. 다음 sum 함수를 살펴봅시다.\n\n        // function sum(a, b) {\n        //   return a + b;\n        // }\n        // 이런 함수들은 순수 함수라고 호칭합니다. 입력값을 바꾸려 하지 않고 항상 동일한 입력값에 대해 동일한 결과를 반환하기 때문입니다.\n\n        // 반면에 다음 함수는 자신의 입력값을 변경하기 때문에 순수 함수가 아닙니다.\n\n        // function withdraw(account, amount) {\n        //   account.total -= amount;\n        // }\n        // React는 매우 유연하지만 한 가지 엄격한 규칙이 있습니다.\n\n        // 모든 React 컴포넌트는 자신의 props를 다룰 때 반드시 순수 함수처럼 동작해야 합니다.\n\n        // 물론 애플리케이션 UI는 동적이며 시간에 따라 변합니다. 다음 장에서는 “state”라는 새로운 개념을 소개합니다. \n        // React 컴포넌트는 state를 통해 위 규칙을 위반하지 않고 사용자 액션, 네트워크 응답 및 다른 요소에 대한 응답으로 \n        // 시간에 따라 자신의 출력값을 변경할 수 있습니다.\n\n    );\n}\n\nexport default ColorComponent;"]},"metadata":{},"sourceType":"module"}