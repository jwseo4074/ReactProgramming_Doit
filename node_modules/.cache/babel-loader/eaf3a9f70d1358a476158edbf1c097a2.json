{"ast":null,"code":"var _jsxFileName = \"/Users/seojiwon/Desktop/\\uB370\\uC2A4\\uD06C\\uD0D1 - zwon - 1/ReactProgramming_Doit/src/03/TodoList.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TodoList() {\n  const todoList = [{\n    taskName: '집에 바로 간다',\n    finished: false\n  }, {\n    taskName: '노래방 갔다가 집에 간다',\n    finished: true\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TodoList\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" using array component and 'key' \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this), todoList.map(todo => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", todo.taskName, \" \"]\n    }, todo.taskName, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 39\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this) // 배열 컴포넌트의 활용\n  //  React 에서 배열 컴포넌트 사용시 key에 배열의 index는 가급적 사용하지 말자. \n  // ex> todoList.map((todo, i) => <div key = {`tl_${i}`})\n  // map 함수에서 인자로 3개를 넣을 수 있다. -> 요소값, 인덱스, this(호출한 객체)\n  // 여기서 인덱스 값, 이거를 키 값으로 넣는다면!!\n  ///=> 배열 항목에서 특정 값에 따라 항목을 제외하는 경우 (filter 함수) 인덱스 번호를 키로 사용한다면\n  // 키값이 함께 변경되는 문제가 발생하기 때문이다. \n  // => 단순한 리스트 렌더링 역할만 수행한다면 문제가 생기지 않지만\n  // 정렬, 추가, 삭제 등의 작업이 있는 경우 예상치 못한 문제가 발생한다. \n  // 키 값이 tl_1 이 tl_0으로 바뀌게 된다. 그럼 리액트가 해당 항목의 컴포넌트를 재활용하지 못하게 되고\n  // 새로 그리게 되어 효율이 좋지 않다.\n  // key 는 React 가 어떤 항목을 변경, 추가 또는 삭제할지 식별하는 것을 도와주어 \n  // 배열 렌더링을 진행할 때 기존의 요소들은 변경되지 않았다는 걸 React 에서 자동으로 파악 후\n  // 새로 생기는 요소에 대해서만 리렌더링을 진행하게 함으로써 최적화된 렌더링을 진행하게 하는 것인데,\n  // 그 자체로 모순이 생기는 것이다.\n  ;\n}\n\n_c = TodoList;\nexport default TodoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"sources":["/Users/seojiwon/Desktop/데스크탑 - zwon - 1/ReactProgramming_Doit/src/03/TodoList.jsx"],"names":["React","TodoList","todoList","taskName","finished","map","todo"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,QAAT,GAAoB;AAChB,QAAMC,QAAQ,GAAG,CACb;AAAEC,IAAAA,QAAQ,EAAG,UAAb;AAAyBC,IAAAA,QAAQ,EAAG;AAApC,GADa,EAEb;AAAED,IAAAA,QAAQ,EAAG,eAAb;AAA8BC,IAAAA,QAAQ,EAAG;AAAzC,GAFa,CAAjB;AAKA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,EAGKF,QAAQ,CAACG,GAAT,CAAeC,IAAD,iBAAW;AAAA,sBAA2BA,IAAI,CAACH,QAAhC;AAAA,OAAUG,IAAI,CAACH,QAAf;AAAA;AAAA;AAAA;AAAA,YAAzB,CAHL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CAOI;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AA1BJ;AA4BH;;KAlCQF,Q;AAoCT,eAAeA,QAAf","sourcesContent":["import React from 'react';\n\nfunction TodoList() {\n    const todoList = [\n        { taskName : '집에 바로 간다', finished : false },\n        { taskName : '노래방 갔다가 집에 간다', finished : true }, \n    ];\n\n    return(\n        <div>\n            <h1>TodoList</h1>\n            <p> using array component and 'key' </p>\n            {todoList.map( (todo) => (<div key={todo.taskName}> {todo.taskName} </div>) )}\n        </div>\n\n        // 배열 컴포넌트의 활용\n        \n        //  React 에서 배열 컴포넌트 사용시 key에 배열의 index는 가급적 사용하지 말자. \n        \n        // ex> todoList.map((todo, i) => <div key = {`tl_${i}`})\n        // map 함수에서 인자로 3개를 넣을 수 있다. -> 요소값, 인덱스, this(호출한 객체)\n        // 여기서 인덱스 값, 이거를 키 값으로 넣는다면!!\n\n        ///=> 배열 항목에서 특정 값에 따라 항목을 제외하는 경우 (filter 함수) 인덱스 번호를 키로 사용한다면\n        // 키값이 함께 변경되는 문제가 발생하기 때문이다. \n        // => 단순한 리스트 렌더링 역할만 수행한다면 문제가 생기지 않지만\n        // 정렬, 추가, 삭제 등의 작업이 있는 경우 예상치 못한 문제가 발생한다. \n\n        // 키 값이 tl_1 이 tl_0으로 바뀌게 된다. 그럼 리액트가 해당 항목의 컴포넌트를 재활용하지 못하게 되고\n        // 새로 그리게 되어 효율이 좋지 않다.\n\n        // key 는 React 가 어떤 항목을 변경, 추가 또는 삭제할지 식별하는 것을 도와주어 \n        // 배열 렌더링을 진행할 때 기존의 요소들은 변경되지 않았다는 걸 React 에서 자동으로 파악 후\n        // 새로 생기는 요소에 대해서만 리렌더링을 진행하게 함으로써 최적화된 렌더링을 진행하게 하는 것인데,\n        // 그 자체로 모순이 생기는 것이다.\n    );\n}\n\nexport default TodoList;"]},"metadata":{},"sourceType":"module"}